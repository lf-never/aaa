const app = require('../app');
const debug = require('debug')('myapp:server');
const http = require('http');

const log = require('../log/winston').logger('APP Service');
const conf = require('../conf/conf');

/**
 * Get port from environment and store in Express.
 */
let port = normalizePort(process.env.PORT || conf.serverPort);
app.set('port', port);

/**
 * Create HTTP server.
 */
let server = http.createServer(app);

let socketServer = require('../socket/socket')
let httpio = require('socket.io')(server, { path: '/driver.socket.io' }).listen(5090)
httpio.on('connection', function (client) {
    socketServer.initSocket(client);
});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Create HTTPs server.
 */
let https = require('https');
let fs = require('fs');
let privateKey  = fs.readFileSync('./https/key.pem', 'utf8');
let certificate = fs.readFileSync('./https/cert.pem', 'utf8');
let credentials = { key: privateKey, cert: certificate };
let httpsServer = https.createServer(credentials, app);

let httpsio = require('socket.io')(httpsServer, { path: '/driver.socket.io' }).listen(5091)
httpsio.on('connection', function (client) {
    socketServer.initSocket(client)
});
  
httpsServer.listen(conf.serverPortHttps);
httpsServer.on('error', onError);
httpsServer.on('listening', onListening);

log.info('Server started!');


/**
 * Normalize a port into a number, string, or false.
 */

 function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      // process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      // process.exit(1);
      break;
    default:
      throw error;
  }
  setTimeout(function () {
      process.exit(1);
  }, 4)

}

function onListening () {
    let addr = server.address();
    let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

